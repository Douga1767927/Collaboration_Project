pwr_calc[[2]]
## sample size required
n <- k + pwr_calc[[2]] + 1
## sample size required
n <- round(k + pwr_calc[[2]] + 1)
n
k <- 5
## Get power calculation
pwr_calc <- pwr.f2.test(u = k, f2 = f2, power = power)
## sample size required
n <- round(k + pwr_calc[[2]] + 1)
# Read in data
data <- read_csv(
here::here(
"data", "2023-03-22_gene-exp_cleaned.csv"
)
)
# Load Libs
pacman::p_load(tidyverse, here, patchwork, viridis, gt, vtable)
# Read in data
data <- read_csv(
here::here(
"data", "2023-03-22_gene-exp_cleaned.csv"
)
)
data
# CLEANING ----
# Skim data
skimr::skim_without_charts(data)
# Remove missing value
data <- na.omit(data)
# EDIT: Changing group level treatment to AF42 & new variable exp_name
data <- data |>
mutate(
group = str_replace(group, "treatment", "AF42")
# exp_name = str_replace(as.character(block),
#                        "[12345678]",
#                        c("GL-CsE",
#                          "GL-bNo",
#                          "GL-JZC",
#                          "GL-fug",
#                          "GL-jEK",
#                          "GL-Hoe",
#                          "GL-Rza",
#                          "GL-xpo"))
)
# Converting character variables to factor
data <- data |>
mutate(cell_line = as.factor(cell_line),
group = as.factor(group),
block = as.factor(block))
data
# Getting experiment names from block Id
data$exp_name <- as.character(data$block)
data$exp_name[data$exp_name == "1"] <- "GL-CsE"
data$exp_name[data$exp_name == "2"] <- "GL-bNo"
data$exp_name[data$exp_name == "3"] <- "GL-JZC"
data$exp_name[data$exp_name == "4"] <- "GL-fUg"
data$exp_name[data$exp_name == "5"] <- "GL-jEK"
data$exp_name[data$exp_name == "6"] <- "GL-Hoe"
data$exp_name[data$exp_name == "7"] <- "GL-Rza"
data$exp_name[data$exp_name == "8"] <- "GL-xpo"
data
write.csv(data, file = here::here("data","2023-05-29_cleaned-data-final.csv"), row.names=FALSE)
## Libs
pacman::p_load(pwr)
## known parameters
power = 0.9  # required power
beta = 1 - power
alpha = 0.05 # significance level
r2 <- 0.1 # r squared value
k <- 5 # number of indpendent predictors
## Calculate effect size
f2 <- r2/(1-r2)
## Get power calculation
pwr_calc <- pwr.f2.test(u = k, f2 = f2, power = power)
## sample size required
n <- round(k + pwr_calc[[2]] + 1)
n
## Load Libs
pacman::p_load(tidyverse)
## load data
data <- read.csv(here::here("data", "2023-05-29_cleaned-data-final"))
## load data
data <- read.csv(here::here("data", "2023-05-29_cleaned-data-final.csv"))
data
head(data)
head(data, 10)
head(data, 11)
## Load Libs
pacman::p_load(tidymodels, lme4)
?recipe
##
lme_rec <- recipe(data = data,
gene_exp ~ .)
lm_model <-
linear_reg(mixture = ~(1 | cell_line)) |>
set_engine("lme") |>
h
lm_model <-
linear_reg(mixture = ~(1 | cell_line)) |>
set_engine("lme")
lme_model <-
linear_reg(mixture = ~(1 | cell_line)) |>
set_engine("lme")
lme_wkfl <- workflow() |>
add_recipe(lme_rec) |>
add_model(lme_model)
lme_model <-
linear_reg(mixture = ~(1 | cell_line)) |>
set_engine("lme4")
##
lme_model <- lmer(gene_exp ~. + (1|cell_line), data = data)
summary(lme_model)
View(data)
data <- data |>
mutate(cell_type = as.factor(exp_name),
treatment = as.factor(group))
data <- data |>
select(cell_line, gene_exp, concentration, treatment, cell_type)
data
##
lme_model <- lmer((1|cell_line) + gene_exp ~ concentration + treatment + cell_type, data = data)
##
lme_model <- lmer(gene_exp ~ (1|cell_line) + concentration + treatment + cell_type, data = data)
summary(lme_model)
##
lme_model <- lmer(gene_exp ~ (1|cell_line) + concentration + treatment + cell_type, data = data)
summary(lme_model)
View(data)
anova(lme_model)
##
lme_model <- lmer(gene_exp ~ (1|cell_line) + concentration*treatment*cell_type, data = data)
summary(lme_model)
View(data)
data <- data |>
mutate(cell_type = as.factor(exp_name),
cell_line = as.factor(cell_line)
treatment = as.factor(group))
data <- data |>
mutate(cell_type = as.factor(exp_name),
cell_line = as.factor(cell_line),
treatment = as.factor(group))
## load data
data <- read.csv(here::here("data", "2023-05-29_cleaned-data-final.csv"))
data <- data |>
mutate(cell_type = as.factor(exp_name),
cell_line = as.factor(cell_line),
treatment = as.factor(group))
data <- data |>
select(cell_line, gene_exp, concentration, treatment, cell_type)
##
lme_model <- lmer(gene_exp ~ (1|cell_line) + concentration*treatment*cell_type, data = data)
summary(lme_model)
anova(lme_model)
##
lme_model <- lmer(gene_exp ~ (1|cell_type) + concentration*treatment*cell_line, data = data)
summary(lme_model)
anova(lme_model)
ranova(lme_model)
## Load Libs
pacman::p_load(tidyverse, tidymodels)
ranova(lme_model)
?ranova
??ranova
anova(lme_model)
summary(lme_model)
# remove 3 way interaction terms
M2 <- update(M_full, .~. - concentration:treatmentplacebo:cell_linewild)
# Full fixed effect model
M_full <- lmer(gene_exp ~ (1|cell_type) + concentration*treatment*cell_line, data = data)
# remove 3 way interaction terms
M2 <- update(M_full, .~. - concentration:treatmentplacebo:cell_linewild)
anova(M2)
# remove 3 way interaction terms
M2 <- update(M_full, .~. - concentration:treatment:cell_line)
anova(M2)
anova(lme_model)
anova(M_full, M2)
# remove 2 way interaction terms
M3 <- update(M2, .~. - concentration:treatment - concentration:cell_line - treatment:cell_line)
anova(M_full, M2, M3)
M_backwards <- step(M_full)
(M_backwards <- step(M_full))
## Load Libs
pacman::p_load(tidyverse, tidymodels, MASS)
?stepAIC
M_step <- stepAIC(M_full, direction = "backward", trace = 1)
step(M_full)
## Load Libs
pacman::p_load(tidyverse, tidymodels, lme4)
step(M_full, direction = "backwards")
M_red <- step(M_full, direction = "backwards")
# Full fixed effect model
M_full <- lmer(gene_exp ~ (1|cell_type) + concentration*treatment*cell_line, data = data)
M_red <- step(M_full, direction = "backwards")
## Load Libs
pacman::p_load(tidyverse, tidymodels, lmerTest)
M_red <- step(M_full, direction = "backwards")
step(M_full, direction = "backwards")
step(M_full)
# Full fixed effect model
M_full <- lmer(gene_exp ~ concentration*treatment*cell_line + (1|cell_type), data = data)
summary(M_full)
# remove 3 way interaction term
M2 <- update(M_full, .~. - concentration:treatment:cell_line)
summary(M2)
# remove 2 way interaction term with insignificant P-value
M3 <- update(M2, .~. - treatmentplacebo:cell_linewild)
summary(M3)
# remove 2 way interaction term with insignificant P-value
M3 <- update(M2, .~. - treatmentplacebo:cell_linewild)
summary(M3)
# remove 2 way interaction term with insignificant P-value
M3 <- update(M2, .~. - treatmentplacebo:cell_linewild - concentration:treatmentplacebo)
summary(M3)
# remove 2 way interaction term with insignificant P-value
M3 <- update(M2, .~. - treatment:cell_line)
summary(M3)
# still have insignificant terms as single predictors. hence to remove them we must remove all interaction terms
M4 <- update(M3, .~. - concentration:treatment - concentration:cell_line)
summary(M4)
# cell_line wild is insignifcant
M5 <- update(M4, .~. - cell_line)
summary(M5)
anova(M_full, M5)
anova(M_full, M2, M3, M4, M5)
ranova(M_full, M2, M3, M4, M5)
ranova(M_full)
summary.lm(M5)
summary(M5)
ranova(M_full)
## Load Libs
pacman::p_load(tidyverse, tidymodels, lmerTest, MuMIn)
r.squaredGLMM(M_full)
r.squaredGLMM?
g
?r.squaredGLMM
R2_full <- r.squaredGLMM(M_full)
R2_2 <- r.squaredGLMM(M2)
R2_3 <- r.squaredGLMM(M3)
R2_4 <- r.squaredGLMM(M4)
R2_5 <- r.squaredGLMM(M5)
R_squared <- rbind(R2_full, R2_2)
R_squared
R_squared <- rbind(R2_full, R2_2, R2_3, R2_4, R2_5)
R_squared
summary(M4)
summary(M3)
summary(M5)
n_pred <- c(7, 6, 5, 3, 2)
anova(M_full, M2, M3, M4, M5)
anova(M_full, M2, M3, M4, M5)[[1]]
anova(M_full, M2, M3, M4, M5)[[2]]
anova(M_full, M2, M3, M4, M5)[2]
AIC <- anova(M_full, M2, M3, M4, M5)[2]
sum_tab <- cbind(n_pred, AIC)
sum_tab <- cbind(n_pred, AIC, R_squared)
sum_tab
AIC <- anova(M5, M4, M3, M2, M_full)[2]
sum_tab <- cbind(n_pred, AIC, R_squared)
sum_tab
anova(M_full, M2, M3, M4, M5)
?t
t(n_pred)
n_pred
R_squared <- rbind(R2_5, R2_4, R2_3, R2_2, R2_full)
n_pred <- c(2,3,5,6,7)
sum_tab <- cbind(n_pred, AIC, R_squared)
sum_tab
rev(sum_tab)
sum_tab <- cbind(n_pred, rev(AIC), R_squared)
sum_tab
sum_tab <- cbind(n_pred, AIC, R_squared)
sum_tab
?rev
sort(sum_tab)
## Load Libs
pacman::p_load(tidyverse, tidymodels, lmerTest, MuMIn, gt)
sum_tab |> gt()
summary(M_full)
plot(M_full)
## Load Libs
pacman::p_load(tidyverse, tidymodels, lmerTest, MuMIn, gt, gglm)
gglm(M_full)
vip::vi(M_full)
\
plot(M_full)
# So M5 has all significant terms
ranova(M_full)
# Predicting data
new_data <- data.frame(
cell_line = "wild",
cell_type = "GL-Rza",
concentration = 6,
treatment = "placebo")
new_data
predict(M_full, new_data)
# Predicting data
new_data <- data.frame(
cell_line = "wild",
cell_type = "GL-bNo",
concentration = 6,
treatment = "placebo")
predict(M_full, new_data)
# Predicting data
new_data <- data.frame(
cell_line = "wild",
cell_type = "GL-bNo",
concentration = 7,
treatment = "placebo")
predict(M_full, new_data)
# Predicting data
new_data <- data.frame(
cell_line = "wild",
cell_type = "GL-bNo",
concentration = 7,
treatment = "placcebo")
predict(M_full, new_data)
# Predicting data
new_data <- data.frame(
cell_line = "wild",
cell_type = "GL-bNo",
concentration = 7,
treatment = "placebo")
predict(M_full, new_data)
# Predicting data
new_data <- data.frame(
cell_line = "wild",
cell_type = "GL-bNo",
concentration = 8,
treatment = "AF42")
predict(M_full, new_data)
citation("lmerTest")
citation("MuMIn")
# Full fixed effect model
M_full <- lmer(gene_exp ~ concentration*treatment*cell_line + (1|cell_type), data = data)
summary(M_full)
summary(M_full)[4]
summary(M_full)[1]
summary(M_full)[[1]]
summary(M_full)[[2]]
summary(M_full)[[4]]
summary(M_full)[[5]]
summary(M_full)[5]
View(M_full)
anova(M_full)
m <- summary(M_full)
View(m)
m$coefficients
summary(M_full)$coefficients
# Full fixed effect model
M_full <- lmer(gene_exp ~ concentration*treatment*cell_line + (1|cell_type), data = data)
summary(M_full)$coefficients
R2_full <- r.squaredGLMM(M_full)
# remove 3 way interaction term
M2 <- update(M_full, .~. - concentration:treatment:cell_line)
summary(M2)$coefficients
R2_2 <- r.squaredGLMM(M2)
# remove 2 way interaction term with insignificant P-value
M3 <- update(M2, .~. - treatment:cell_line)
summary(M3)$coefficients
R2_3 <- r.squaredGLMM(M3)
M4 <- update(M3, .~. - concentration:treatment - concentration:cell_line)
summary(M4)$coefficients
R2_4 <- r.squaredGLMM(M4)
M5 <- update(M4, .~. - cell_line)
summary(M5)$coefficients
R2_5 <- r.squaredGLMM(M5)
summary(M_full)$coefficients |> gt()
summary(M_full)$coefficients |> head()
summary(M_full)$coefficients |> as_data_frame()
summary(M_full)$coefficients |> as_data_frame() |> gt()
summary(M_full)$coefficients |> as_tibble() |> gt()
summary(M_full)$coefficients |> head() |> gt()
#| include: false
pacman::p_load(tidyverse, lmerTest, MuMIn, gt, gglm)
theme_set(theme_bw())
## load data
data <- read.csv(here::here("data", "2023-05-29_cleaned-data-final.csv"))
#| tbl-cap: Table was top five penalty terms based on RMSE and 10-fold cross-validation of training dataset.
M_full <- lmer(gene_exp ~ concentration*treatment*cell_line + (1|cell_type), data = data)
#| include: false
# clean data
data <- data |>
mutate(cell_type = as.factor(exp_name),
cell_line = as.factor(cell_line),
treatment = as.factor(group))
# obtain necesarry columns
data <- data |>
select(cell_line, gene_exp, concentration, treatment, cell_type)
data
#| tbl-cap: Table was top five penalty terms based on RMSE and 10-fold cross-validation of training dataset.
M_full <- lmer(gene_exp ~ concentration*treatment*cell_line + (1|cell_type), data = data)
summary(M_full)$coefficients
#R2_full <- r.squaredGLMM(M_full)
summary(M_full)$coefficients[5]
summary(M_full)$coefficients[[1]]
summary(M_full)$coefficients[1]
summary(M_full)$coefficients[0]
ranova(M_full)
ranova(M_full) |> gt()
?r.squaredGLMM
#| echo: false
AIC <- anova(M5, M4, M3, M2, M_full)[2]
#| echo: false
M_full <- lmer(gene_exp ~ concentration*treatment*cell_line + (1|cell_type), data = data)
summary(M_full)$coefficients
#R2_full <- r.squaredGLMM(M_full)
#| echo: false
#| tbl-cap: Step 2
M2 <- update(M_full, .~. - concentration:treatment:cell_line)
summary(M2)$coefficients
#R2_2 <- r.squaredGLMM(M2)
#| echo: false
M3 <- update(M2, .~. - treatment:cell_line)
summary(M3)$coefficients
#R2_3 <- r.squaredGLMM(M3)
#| echo: false
M4 <- update(M3, .~. - concentration:treatment - concentration:cell_line)
summary(M4)$coefficients
R2_4 <- r.squaredGLMM(M4)
#| echo: false
M_full <- lmer(gene_exp ~ concentration*treatment*cell_line + (1|cell_type), data = data)
summary(M_full)$coefficients
R2_full <- r.squaredGLMM(M_full)
#| echo: false
#| tbl-cap: Step 2
M2 <- update(M_full, .~. - concentration:treatment:cell_line)
summary(M2)$coefficients
R2_2 <- r.squaredGLMM(M2)
#| echo: false
M3 <- update(M2, .~. - treatment:cell_line)
summary(M3)$coefficients
R2_3 <- r.squaredGLMM(M3)
#| echo: false
M4 <- update(M3, .~. - concentration:treatment - concentration:cell_line)
summary(M4)$coefficients
R2_4 <- r.squaredGLMM(M4)
#| echo: false
M5 <- update(M4, .~. - cell_line)
summary(M5)$coefficients
R2_5 <- r.squaredGLMM(M5)
#| echo: false
AIC <- anova(M5, M4, M3, M2, M_full)[2]
R_squared <- rbind(R2_5, R2_4, R2_3, R2_2, R2_full)
n_pred <- c(2,3,5,6,7)
model <- c("full", "step2", "step3", "step4", "step5")
sum_tab <- cbind(rev(model), n_pred, AIC, R_squared)
#| tbl-cap: AIC and R-squared value (both margionalised and conditional) for each model generated from the backwards selection process.
sum_tab |> gt()
#| echo: false
AIC <- anova(M5, M4, M3, M2, M_full)[2]
R_squared <- rbind(R2_5, R2_4, R2_3, R2_2, R2_full)
n_pred <- c(2,3,5,6,7)
model <- rev(c("full", "step2", "step3", "step4", "step5"))
sum_tab <- cbind(model, n_pred, AIC, R_squared)
#| tbl-cap: AIC and R-squared value (both margionalised and conditional) for each model generated from the backwards selection process.
sum_tab |> gt()
#| tbl-cap: AIC and R-squared value (both margionalised and conditional) for each model generated from the backwards selection process.
sum_tab |> gt()
#| echo: false
M4 <- update(M3, .~. - concentration:treatment - concentration:cell_line)
summary(M4)$coefficients
R2_4 <- r.squaredGLMM(M4)
#| echo: false
#| tbl-cap: AIC and R-squared value (both margionalised and conditional) for each model generated from the backwards selection process.
#| label: Table 1
sum_tab |> gt()
gglm(M_full)
?predict
# Predicting data
new_data <- data.frame(
cell_line = "wild",
cell_type = "GL-bNo",
concentration = 8,
treatment = "AF42")
prediction <- predict(M_full, new_data)
cbind(new_data, prediction)
# Predicting data
new_data <- data.frame(
cell_line = "wild",
cell_type = "GL-bNo",
concentration = 8,
treatment = "placebo")
prediction <- predict(M_full, new_data)
actual <-
cbind(new_data, prediction)
actual <- 8.23
cbind(new_data, prediction, actual)
tab2 |> gt()
tab2 <- cbind(new_data, prediction, actual)
tab2 |> gt()
citation("gglm")
R.version.string
R.version
R.Version()
RStudio.Version()
RStudio.Version()
R.version.string
update.packages(ask = FALSE, checkBuilt = TRUE)
## Load Libs
pacman::p_load(tidyverse, lmerTest, MuMIn, gt, gglm)
## Load Libs
pacman::p_load(tidyverse, lmerTest, MuMIn, gt, gglm)
which git
which git
where git
where git
git
where git
where(git)
